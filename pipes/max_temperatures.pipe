TOKEN "max_temperatures_endpoint_read_5758" READ

NODE city_and_period_of_interest
DESCRIPTION >
    Applying 'city', 'start_time', and 'end_time' query parameters. This is a case where we pull in every field (SELECT \*) and do not take this opportunity to drop fields. The fields arriving via the Event API have already been curated by a Python script.

SQL >

    %
        SELECT *
        FROM weather_data
        WHERE
            1=1
             {% if defined(city) %}
                AND lowerUTF8(site_name) LIKE lowerUTF8({{ String(city, description="Name of US City to get data for. Data is available for the 175 most populated cities in the US. Optional and defaults to all cities.") }})
             {% end %}
             {% if defined(start_time) and defined(end_time) %}
                 AND toDateTime(timestamp) BETWEEN parseDateTimeBestEffort({{ DateTime(start_time, description="'YYYY-MM-DD HH:mm:ss'. UTC. Optional and defaults to one year ago. Defines the start of the period of interest. ") }}) AND parseDateTimeBestEffort({{ DateTime(end_time, description="'YYYY-MM-DD HH:mm:ss'. UTC. Optional and defaults to time of request. Defines the end of the period of interest.") }})
             {% end %}
             {% if not defined(start_time) and not defined(end_time) %}
                AND toDateTime(timestamp) BETWEEN addDays(now(),-365) AND now()
             {% end %}
             {% if defined(start_time) and not defined(end_time) %}
                 AND toDateTime(timestamp) BETWEEN parseDateTimeBestEffort({{ DateTime(start_time) }}) AND now()
             {% end %}
             {% if not defined(start_time) and defined(end_time) %}
                 AND toDateTime(timestamp) BETWEEN addDays(toDateTime(parseDateTimeBestEffort({{DateTime(end_time)}}),-7) AND parseDateTimeBestEffort({{ DateTime(end_time) }})
             {% end %}
        ORDER BY timestamp DESC



NODE select_sensor_type
SQL >

    %
        WITH
        {{ String(sensor_type, 'all', description="Type of weather data to return. Default is all types. Available types: 'temp', 'precip', 'wind', 'humidity', 'pressure', and 'clouds'. Wind returns both velocity and direction paramters. Units: temperature (F), precip (inches per hour), wind (mph and degrees) humidity (%), pressure (hPa), clouds (% coverage), ")}}
        SELECT
            timestamp,
            site_name,
            {% if defined(sensor_type) and sensor_type == 'temp' %} temp_f
            {% elif defined(sensor_type) and sensor_type == 'precip' %} precip
            {% elif defined(sensor_type) and sensor_type == 'wind' %} wind_speed, wind_dir
            {% elif defined(sensor_type) and sensor_type == 'humidity' %} humidity
            {% elif defined(sensor_type) and sensor_type == 'pressure' %} pressure
            {% elif defined(sensor_type) and sensor_type == 'clouds' %} clouds
            {% else %}
                temp_f, precip, wind_speed, wind_dir, humidity, pressure, clouds, description
            {% end %} 
        FROM city_and_period_of_interest



NODE endpoint
SQL >

    %
        SELECT DATE(timestamp) AS date, 
        site_name,
        MAX(temp_f) as temp
        FROM select_sensor_type
        GROUP BY DATE(timestamp), site_name
        ORDER BY temp DESC
        LIMIT {{ Int32(max_results, 1000, description="The maximum number of reports to return per response.") }}


