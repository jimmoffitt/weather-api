DESCRIPTION >
	Based on the `reports` Pipe. 

References the new `site_location_data` Data Source and enables requests for and groupings of US States.


TOKEN "reports_by_state_endpoint_read_9188" READ

NODE state_and_period_of_interest
DESCRIPTION >
    Applying 'city', 'start_time', and 'end_time' query parameters. This is a case where we pull in every field (SELECT \*) and do not take this opportunity to drop fields. The fields arriving via the Event API have already been curated by a Python script. 
        Time parameters have this default behavior:
        * If none are used, data from the past 24 hours are available.
        * end_time defaults to the time of the request, i.e. now().
        * start_time defaults to 7 days before the end_time. 
        For testing: 
        {% set city = 'minneapolis' %}
        {% set start_time = '2023-05-04 00:00:00' %}

SQL >

    %
    SELECT wd.timestamp, wd.site_name, wd.temp_f, wd.*
    FROM weather_data wd
    JOIN site_location_data sld
    ON sld.site_name = wd.site_name
    WHERE
        1=1
         {% if defined(state) %}
            AND lowerUTF8(sld.state_code) LIKE lowerUTF8({{ String(state, description="Two-character code of the US State of interest. Optional and defaults to all states.") }})
         {% end %}
         {% if defined(start_time) and defined(end_time) %}
             AND toDateTime(wd.timestamp) BETWEEN parseDateTimeBestEffort({{ DateTime(start_time, description="'YYYY-MM-DD HH:mm:ss'. UTC. Optional and defaults to 7 days ago. Defines the start of the period of interest. ") }}) AND parseDateTimeBestEffort({{ DateTime(end_time, description="'YYYY-MM-DD HH:mm:ss'. UTC. Optional and defaults to time of request. Defines the end of the period of interest.") }})
         {% end %}
         {% if not defined(start_time) and not defined(end_time) %}
            AND toDateTime(wd.timestamp) BETWEEN addDays(now(),-7) AND now()
         {% end %}
         {% if defined(start_time) and not defined(end_time) %}
             AND toDateTime(wd.timestamp) BETWEEN parseDateTimeBestEffort({{ DateTime(start_time) }}) AND now()
         {% end %}
         {% if not defined(start_time) and defined(end_time) %}
             AND toDateTime(wd.timestamp) BETWEEN addDays(toDateTime(parseDateTimeBestEffort({{DateTime(end_time)}}),-7) AND parseDateTimeBestEffort({{ DateTime(end_time) }})
         {% end %}
    ORDER BY wd.timestamp DESC



NODE select_sensor_type
DESCRIPTION >
    Here we support the sensor_type query parameter. When used, just that data type is selected, along with the timestamp and site_name attributes. Note that 'wind' is a special case and two data types are returned (speed and direction).

SQL >

    %
        WITH
        {{ String(sensor_type, 'all', description="Type of weather data to return. Default is all types. Available types: 'temp', 'precip', 'wind', 'humidity', 'pressure', and 'clouds'. Wind returns both velocity and direction paramters. Units: temperature (F), precip (inches per hour), wind (mph and degrees) humidity (%), pressure (hPa), clouds (% coverage), ")}}
        SELECT
            timestamp,
            site_name,
            {% if defined(sensor_type) and sensor_type == 'temp' %} temp_f
            {% elif defined(sensor_type) and sensor_type == 'precip' %} precip
            {% elif defined(sensor_type) and sensor_type == 'wind' %} wind_speed, wind_dir
            {% elif defined(sensor_type) and sensor_type == 'humidity' %} humidity
            {% elif defined(sensor_type) and sensor_type == 'pressure' %} pressure
            {% elif defined(sensor_type) and sensor_type == 'clouds' %} clouds
            {% else %}
                temp_f, precip, wind_speed, wind_dir, humidity, pressure, clouds, description
            {% end %} 
        FROM state_and_period_of_interest



NODE endpoint
DESCRIPTION >
    Here we apply the 'max_results' parameter.

SQL >

    %
        WITH
        {{ String(order, 'desc', description="Temporal order. Options: 'desc' or 'asc'. Defaults to descending ('desc') order, most recent timestamp first. Ascending ('asc') order is needed for some charting tools.")}}
        SELECT * 
        FROM select_sensor_type
        {% if order == 'desc' %}
          ORDER BY timestamp DESC
        {% else %}
          ORDER BY timestamp ASC
        {% end %}  
        LIMIT {{ Int32(max_results, 10000, description="The maximum number of reports to return per response.") }}


